'''1). Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами на промежутке
 [-100; 100). Выведите на экран исходный и отсортированный массивы.
Примечания:
● алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
● постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком. Улучшенные версии
 сортировки, например, расчёской, шейкерная и другие в зачёт не идут.'''
# для сортировки в обратную стророну просто поменяла в условии "if array[i] < array[i + 1]" : знак ">" на "<"
#ничего разумнее не придумалось. Насчет естественности поведения - намек Артура мне ничем не помог, пришлось
#почитать про оптимизацию пузырьковой сортировки )) как я поняла и сделала - уменьшаем длину алгоритма на n,
#чтоб не проверялись последние элементы, которые уже стоят на своем месте

import random

MIN_ITEM = -100
MAX_ITEM = 100
def bubble(SIZE):
    array = [random.randint(MIN_ITEM, (MAX_ITEM - 1)) for _ in range(SIZE)]
    print(array)
    n = 1
    while n < len(array):
        for i in range(len(array) - n):
            if array[i] < array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
        n += 1
        #print(array)
    return array
print(bubble(30))
